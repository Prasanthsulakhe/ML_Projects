CREATE DATABASE INVENTORY_PROJECT;

USE INVENTORY_PROJECT;

CREATE TABLE SUPPLIER(
SID CHAR(5) PRIMARY KEY,
SNAME VARCHAR(20) NOT NULL,
SADD VARCHAR(20) NOT NULL,
SCITY VARCHAR(20) DEFAULT('DELHI'),
SPHONE CHAR(15) UNIQUE,
EMAIL VARCHAR(50));

SELECT * FROM SUPPLIER;

CREATE TABLE PRODUCT(
PID CHAR(5) PRIMARY KEY,
PDESC VARCHAR(20) NOT NULL,
PRICE INT CHECK(PRICE>=0),
CATEGORY VARCHAR(5) CHECK(CATEGORY IN ('IT','HA','HC')),
SID CHAR(5) FOREIGN KEY REFERENCES SUPPLIER(SID));

SELECT * FROM PRODUCT;

CREATE TABLE STOCK(
PID CHAR(5) FOREIGN KEY REFERENCES PRODUCT(PID),
SQTY INT CHECK (SQTY>=0),
ROL INT CHECK(ROL>0),
MOQ INT CHECK(MOQ>=5));

SELECT * FROM STOCK;

CREATE TABLE CUSTOMER(
CID CHAR(5) PRIMARY KEY,
CNAME VARCHAR(20) NOT NULL,
ADDRESS VARCHAR(20),
CITY VARCHAR(30) NOT NULL,
PHONE VARCHAR(15) NOT NULL,
EMAIL VARCHAR(50),
DOB DATE CHECK(DOB < '2000-01-01'));

SELECT * FROM CUSTOMER;

--DROP TABLE ORDERS;
CREATE TABLE ORDERS(
OID CHAR(5) PRIMARY KEY,
ODATE DATE,
PID CHAR(5) FOREIGN KEY REFERENCES PRODUCT(PID),
CID CHAR(5) FOREIGN KEY REFERENCES CUSTOMER (CID),
OQTY INT CHECK(OQTY>=1));

SELECT* FROM ORDERS;

CREATE TABLE PURCHASE_TABLE (
PID CHAR(5) FOREIGN KEY REFERENCES PRODUCT(PID), 
SID CHAR(5) FOREIGN KEY REFERENCES SUPPLIER(SID), 
PQTY INT,  
DOP DATE);

SELECT * FROM PURCHASE_TABLE;


-- Creating sequences for unique IDs

DROP SEQUENCE S;
CREATE SEQUENCE S AS INT
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 10000;

CREATE SEQUENCE C AS INT
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 10000;

CREATE SEQUENCE O AS INT
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 10000;

CREATE SEQUENCE P AS INT
START WITH 1
INCREMENT BY 1
MINVALUE 1
MAXVALUE 10000;

-- Function to generate formatted IDs
CREATE FUNCTION ID (@C CHAR(1) , @V INT)
RETURNS CHAR(6)
AS
BEGIN
	DECLARE @EID CHAR(6)

	IF @V<10
		SET @EID=CONCAT(@C,'000',@V)
	ELSE IF @V<100
		SET @EID=CONCAT(@C,'00', @V)
	ELSE IF @V<10000
		SET @EID=CONCAT(@C, @V)

	RETURN @EID
END;

-- Stored procedure to add a supplier

CREATE PROCEDURE ADDSUPPLIER
@SNAME VARCHAR(20),@SADD VARCHAR(20),
@SCITY VARCHAR(20),@SPHONE CHAR(15),@EMAIL VARCHAR(50)
AS
BEGIN
	INSERT INTO SUPPLIER VALUES(DBO.ID('S',NEXT VALUE FOR S),@SNAME,@SADD,@SCITY,@SPHONE,@EMAIL)
	SELECT * FROM SUPPLIER
END;

-- Stored procedure to add a product
CREATE PROCEDURE ADDPRODUCT @PDESC VARCHAR(30),@PRICE INT,@CATEGORY VARCHAR(30),@SID CHAR(6)
AS
BEGIN
INSERT INTO PRODUCT VALUES(DBO.ID('P',NEXT VALUE FOR P),@PDESC,@PRICE,@CATEGORY,@SID)
SELECT * FROM PRODUCT
END;

-- Stored procedure to add an order

CREATE PROCEDURE ADDORDER @PID CHAR(6),@CID CHAR(6),@OQTY INT
AS
BEGIN
INSERT INTO ORDERS VALUES(DBO.ID('C',NEXT VALUE FOR P),GETDATE(),@PID,@CID,@OQTY)
SELECT * FROM ORDERS
END;

-- Stored procedure to add an customer

CREATE PROCEDURE ADDCUST @CNAME VARCHAR(30),@ADDRESS VARCHAR(30),
@CITY VARCHAR(30),@PHONE VARCHAR(15),@EMAIL VARCHAR(30),@DOB DATE
AS
BEGIN
INSERT INTO CUSTOMER VALUES(DBO.ID('C',NEXT VALUE FOR C),@CNAME,@ADDRESS,@CITY,@PHONE,@EMAIL,@DOB)
SELECT * FROM CUSTOMER
END;


-- Trigger to update stock when an order is placed
DROP TRIGGER "STOCK_UPDATE-1";
CREATE TRIGGER  "STOCK UPDATE 1"
ON ORDERS
FOR INSERT
AS
BEGIN
	DECLARE @OS INT
	DECLARE @AS INT
	SET @OS=(SELECT TOP 1 OQTY FROM INSERTED)
	SET @AS=(SELECT SQTY FROM STOCK WHERE PID= (SELECT TOP 1 PID FROM INSERTED))

	IF @AS>=@OS
	BEGIN
		UPDATE STOCK SET SQTY = @AS-@OS
		WHERE PID=(SELECT PID FROM INSERTED)
		PRINT  'ORDER HAS BEEN PLACED'
		COMMIT
	END
	ELSE
	BEGIN
		ROLLBACK
		PRINT 'ORDER NOT PLACED'
	END
END;


-- Trigger to update stock OF change in the ordered quantity when an order is re-placed

DROP TRIGGER "STOCK UPDATE 2";
CREATE TRIGGER  "STOCK UPDATE 2"
ON ORDERS 
FOR UPDATE
AS
BEGIN
	DECLARE @NOS INT
	DECLARE @OS INT
	DECLARE @AS INT
	SET @NOS=(SELECT TOP 1 OQTY FROM INSERTED)
	SET @OS = (SELECT TOP 1 OQTY FROM DELETED)
	SET @AS =(SELECT SQTY FROM STOCK WHERE PID = (SELECT TOP 1 PID FROM INSERTED))
	IF @AS+@OS>=@NOS
	BEGIN
		UPDATE STOCK SET SQTY = SQTY+@OS - @NOS
		WHERE PID=(SELECT TOP 1 PID FROM INSERTED)
		PRINT 'ORDER HAS BEEN PLACED'
	END
	ELSE
	BEGIN
		ROLLBACK
		PRINT 'ORDER NOT PLACED'
	END
END;


-- Procedure to generate daily sales report

CREATE PROCEDURE DAILY_REPORT @DATE DATE
AS
SELECT OID,PRODUCT.PID,OQTY,PRICE*OQTY AS ANOUNT,ODATE
FROM ORDERS INNER JOIN PRODUCT
ON PRODUCT.PID = ORDERS.PID
WHERE ODATE = @DATE


-- Procedure to generate daily sales report
CREATE PROCEDURE BILL @OID VARCHAR(6)
AS 
SELECT OID,PRICE*OQTY AS ANOUNT
FROM ORDERS INNER JOIN PRODUCT
ON PRODUCT.PID = ORDERS.PID
WHERE ORDERS.OID = @OID

-- Procedure to generate a customer ledger
CREATE PROCEDURE CUSTOMER_LEDGER @CID VARCHAR(6)
AS
SELECT CUSTOMER.CID,OID,PRODUCT.PID,OQTY,PRICE*OQTY AS ANOUNT, ODATE
FROM ORDERS INNER JOIN PRODUCT 
ON PRODUCT.PID = ORDERS.PID
INNER JOIN CUSTOMER 
ON CUSTOMER.CID = ORDERS.CID
WHERE CUSTOMER.CID = @CID


-- Procedure to generate supplier report


CREATE PROCEDURE SUPPLIER_REPORT @SID VARCHAR(6)
AS
BEGIN
SELECT SUPPLIER.SID, SNAME,PRODUCT.PID,PDESC,PRICE,CATEGORY
    FROM SUPPLIER 
    INNER JOIN PRODUCT  ON SUPPLIER.SID = PRODUCT.SID
    INNER JOIN ORDERS ON PRODUCT.PID = ORDERS.PID
    WHERE SUPPLIER.SID = @SID;
END;

-- Trigger to automatically generate purchase order when stock is low

CREATE TRIGGER AUTO_GEN_PUR_ORDER
ON ORDERS
FOR INSERT
AS
BEGIN
DECLARE @SQTY INT
DECLARE @ROL INT
DECLARE @MOQ INT
DECLARE @SID CHAR(5)
DECLARE @PID CHAR(5)
SET @SQTY=(SELECT SQTY FROM STOCK WHERE PID=(SELECT TOP 1 PID FROM INSERTED))
SET @ROL=(SELECT ROL FROM STOCK WHERE PID=(SELECT TOP 1 PID FROM INSERTED))
SET @MOQ=(SELECT MOQ FROM STOCK WHERE PID=(SELECT TOP 1 PID FROM INSERTED))
SET @SID=(SELECT SID FROM PRODUCT WHERE PID=(SELECT TOP 1  PID FROM INSERTED))
SET @PID=(SELECT TOP 1 PID FROM INSERTED) 
IF @SQTY<@ROL
INSERT INTO  PURCHAGE_TABLE VALUES (@PID,@SID,@MOQ,GETDATE())
END